import jobPostData from '../model/jobModel';
import Response from "../helpers/response";



class jobController {
   
    static createjobpost = async (req, res) => {
        let {
            jobTitle,
            jobDescription,
            categoryId,userId,
            isActive,
            applicationId
        } = req.body;
        const postedTime = new Date(Date.now());

        const postedDeadLineTime = new Date(Date.now());


        const data = await jobPostData.create(req.body);
        if (!data) {
            return Response.errorMessage(res,"jobPost failed to be created", 417)
        }
         return Response.successMessage(res, "jobPost created is successfull",{data},201)
  
  
  
      }
      static getAllpostedJob = async(req, res) => {
        
        const data = await jobPostData.find();


    return Response.successMessage(res, "This is All posted jobs",{data},200)


    }

    static deleteOnepostedJob= async(req,res)=>{
        const jobPostId= req.params.id;

        const data = await jobPostData.findByIdAndDelete(jobPostId);
        
        if (!data) {


    return  Response.errorMessage(res," Failed To Delete posted job",417) 

        }

    return Response.successMessage(res, "posted job  Deleted Succesfully",{jobPostId},201)

    }

    static updatepostedJob= async (req,res)=>{

        const jobPostId=req.params.id;

        let{
            jobTitle,
            jobDescription,
            categoryId,
            isActive,
            applicationId  
        } =req.body;

        const data= await jobPostData.findByIdAndUpdate(jobPostId, {
            jobTitle :jobTitle,
            jobDescription:jobDescription,
            categoryId:categoryId,
            isActive:isActive,
            applicationId:applicationId
            
        });

     if(!data){

    return  Response.errorMessage(res,"Updated Failed",404) 

       
    }

    const jobPostUpdate= await jobPostData.findById(jobPostId);
    return Response.successMessage(res, "Updated Successfully",{jobPostUpdate},201)
      

        }  
     
        static getOnepostedJob = async (req, res) => {

            const jobPostId = req.params.id;
    
            const data = await jobPostData.findById(jobPostId )
    
            if (!data ) {
    
        return  Response.errorMessage(res,"Failed to Get One jobPost",417) 
    
            }
    
        return Response.successMessage(res, "Get one jobPost Succesfully",{data },201)
    
          
        }
    






















}
export default jobController;
//_ID: id generated by mongo 
/*static getAllBlog =async(req,res)=>{
    const data = await blogData;
    //const data = await blogData.create(req.body);
    return res.status(200).json({
        status:200,
           message:"this is all blogs",
           data
    })
};
static getAllBlog =(req,res)=>{
    const data = blogs;
    return res.status(200).json({
        status:200,
           message:"this is all blogs",
           data
    })
};
static  getOneBlog =(req,res)=>{
    const blogid =  req.params.Id;
  const data = blogs.find(blog =>blog.data===parseInt(blogid));
  if(!data){
    return res.status(201).json({
        status:201,
        message:"this is one blogId",
        data
    })
  }
}
static deleteOneBlog =(req,res)=>{
    const blogid =  req.params.id;
  const dataIndex = blogs.findIndex(blog =>blog.blogid===parseInt(blogid));
  console.log(dataIndex);
   if(dataIndex ===-1){
       return res.status(404).json({
           status:404,
           message:"not found",
       });
   }
   const remove= blogs.splice(dataIndex,1);
  return res.status(200).json({
    status:200,
    message:"index is found",
    dataIndex
})
}
static updateOneBlog =(req,res)=>{
    const blogid = parseInt(req.params.id);
    const dataIndex = blogs.findIndex(blog =>blog.blogid===parseInt(blogid));
    console.log(dataIndex);
     if(dataIndex ===-1){
         return res.status(404).json({
             status:404,
             message:"not found",
         });
     }
let {
    title,
    content,
    timestamp,
    userId
}=req.body;
const blog = new blogData(blogid,title,content,timestamp,userId);
blogs[dataIndex]=blog;
const data = blogs.find(blog=>blog.blogid===blogid);
if(!data){
    return res.status(417).json(
        {
           status:417,
           message:"blog failed to be updated",
        }
    )
}
return res.status(200).json(
    {
        status:200,
        message:"blog updated is successfull",
        data
    })
}
}*/




